package prachi.raval.smartgridcommunication
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Base64
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import androidx.annotation.RequiresApi
import java.nio.charset.StandardCharsets
import java.security.MessageDigest
import java.security.NoSuchAlgorithmException
import java.security.spec.InvalidKeySpecException
import java.security.spec.KeySpec
import javax.crypto.BadPaddingException
import javax.crypto.Cipher
import javax.crypto.IllegalBlockSizeException
import javax.crypto.NoSuchPaddingException
import javax.crypto.SecretKey
import javax.crypto.SecretKeyFactory
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.PBEKeySpec
import javax.crypto.spec.SecretKeySpec

class MainActivity : AppCompatActivity() {

    private lateinit var inputText: EditText
    private lateinit var inputPassword: EditText
    private lateinit var outputText: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        inputText = findViewById(R.id.inputText)
        inputPassword = findViewById(R.id.inputPassword)
        outputText = findViewById(R.id.outputText)

        val encryptButton = findViewById<Button>(R.id.encrBtn)
        encryptButton.setOnClickListener {
            val text = inputText.text.toString()
            val password = inputPassword.text.toString()
            val encryptedText = encrypt(text, password)
            outputText.text = encryptedText
        }

        val decryptButton = findViewById<Button>(R.id.decBtn)
        decryptButton.setOnClickListener {
            val encryptedText = outputText.text.toString()
            val password = inputPassword.text.toString()
            val decryptedText = decrypt(encryptedText, password)
            inputText.setText(decryptedText)
        }
    }

    private fun encrypt(input: String, password: String): String {
        val cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
        val key = generateKey(password)
        val ivSpec = IvParameterSpec(ByteArray(cipher.blockSize))

        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec)

        val encrypted = cipher.doFinal(input.toByteArray(Charsets.UTF_8))
        return Base64.encodeToString(encrypted, Base64.DEFAULT)
    }

    private fun decrypt(input: String, password: String): String {
        val cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
        val key = generateKey(password)
        val ivSpec = IvParameterSpec(ByteArray(cipher.blockSize))

        cipher.init(Cipher.DECRYPT_MODE, key, ivSpec)

        val encrypted = Base64.decode(input, Base64.DEFAULT)
        val decrypted = cipher.doFinal(encrypted)
        return String(decrypted, Charsets.UTF_8)
    }

    private fun generateKey(password: String): SecretKeySpec {
        val digest = MessageDigest.getInstance("SHA-256")
        val key = digest.digest(password.toByteArray(Charsets.UTF_8))
        return SecretKeySpec(key, "AES")
    }
}
